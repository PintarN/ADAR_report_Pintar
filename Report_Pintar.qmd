---
title: |
  | Knowledge complexity of 
  | European metropolitan regions
subtitle: |
  | 
  | ADAR project report, WS 17/18
author: "*Nico Pintar*, h1052260"
date: 02/07/2024
date-format: "MMMM YYYY"
abstract: "Knowledge creation is widely considered as the central driver for innovation, and accordingly, for creating
competitive advantage. However, most measurement approaches have so far mainly focused on the quantitative
dimension of knowledge creation, neglecting that not all knowledge has the same value (Balland and Rigby,
2017). The notion of knowledge complexity has come into use in this context just recently as an attempt to
measure the quality of knowledge in terms of its uniqueness and its replicability. The central underlying
assumption is that more complex knowledge is more difficult to be replicated, and therefore provides a higher
competitive advantage for firms, or at an aggregated level, regions and countries. The objective of this study is to
advance and apply measures for regional knowledge complexity to a set of European regions, and to highlight its
potential in a regional policy context."
format:
  pdf:
    documentclass: article
    toc: false
    bookmarksdepth: 4
    number-sections: true
    colorlinks: true
    fig-cap-location: top
    fig-format: retina
    fig-dpi: 450
    geometry:
      - top=30mm
      - left=25mm
      - right=25mm
      - bottom=25mm
---

# Background and motivation

The ability to create and adapt new knowledge as a pre-requisite for
successful innovation is widely considered as an important driver for the
competitiveness and productivity of firms, and accordingly the regions where these firms
are located (see e.g. Malecki, 2014). Therefore, the development and
application of indicators on knowledge production has become one of
the central concerns not only in a scientific context per se, but increasingly 
as a major instrument to orientate and evaluate research and
innovation policies (see e.g. Godin, 2003; Katz, 2006), often referred to
under the notion of policy learning and evidence-based policy making
(Borras and Laatsit, 2019; Sanderson, 2002). In this context, many
scholars point to the growth of the *indicators landscape* in terms of
quantity and data availability, which is at the same time characterised
by more limitations in times of increased complexity of innovation
processes and systems (see e.g. Freeman and Soete, 2009).  

One weakness that we can specifically observe of indicators on
knowledge production – with knowledge production considered as the
main underlying driver for innovation – is its focus on *quantity*. In other
words, common indicators measuring knowledge production activities,
often derived from patenting information, focus on pure quantitative
counts of some knowledge outputs, relating such outputs to innovative
outcomes. This is also common practice for most policy-oriented indicator systems, 
such as the European innovation scoreboard (Hollanders
et al., 2009). Accordingly, in such works it is implicitly assumed that all
knowledge has the same value, i.e. the quality of knowledge is often
neglected (Balland and Rigby, 2017). 

Against this background, the notion of *knowledge complexity* has
come into play more prominently in the recent past (see e.g. Balland and
Rigby, 2017). Within this conception, the complex nature of knowledge
is associated with its value and quality in terms of accessibility and
mobility in (geographical) space, with a higher complexity reflecting
increasing quality but decreasing accessibility for others due to its
higher degree of *tacitness* and, accordingly, spatial *stickiness*. In
essence, the approach is derived from the work presented by Hidalgo
and Hausmann (2009) who introduced the complexity notion to grasp
the ability of countries to export non-ubiquitous product groups. This
was transferred to the concept of knowledge complexity, and to the
regional level (Balland and Rigby, 2017; Ivanova et al., 2017; Pintar and
Scherngell, 2018) as an equivalent in terms of the knowledge domains
regions are capable of. From the perspective of complexity and systems
theory (Fleming and Sorenson, 2001; Kauffman, 1993; Simon, 1962),
the complexity of knowledge can be well related to the variety of
differing knowledge components it contains, and the interdependencies
of those components.

With its focus on knowledge complexity, this study lies in the vein of
the research stream exploring knowledge production processes and their
dynamics, but takes a spatial economics and regional policy perspective
in its conceptualisation and application. The objective is to advance
measures for regional knowledge complexity, and to apply them to a set
of European regions, highlighting its potential in a regional policy
context. Furthermore, we apply the regional knowledge
complexity measure to a new and more meaningful set of European
regions. Most works investigating regional knowledge production rely
on standard administrative classifications (mostly NUTS-2) that might
artificially intersect agglomerations of knowledge creation (cities)
leading to problematic interpretations in a spatial context (Lepori et al.,
2019). If a considerable share of residents in areas close to or around
large cities commute to work, economic activity in these commuter belts
should be counted towards the main city, essentially creating functional
areas. The so-called *metropolitan regions* defined by EUROSTAT (2019) 
- which we use in this study as a unit of observation -  aim to do that. 

The focus of this study is on relating regional knowledge
complexity - compared to non-complex knowledge production -  to regional productivity in a spatial regression framework. 
As regions are increasingly embedded into their surroundings in their knowledge production activities - be it via formal or informal research and development collaborations - it is important to relax the independent observation assumption of basic linear regression models and explicitly take space into account. Specifically, we employ a *spatial durbin model* (SDM) that introduces a spatially lagged dependent variable and multiple spatially lagged independent variables to explain regional knowledge production. 

# Methods and empirical approach

## Operationalisation of knowledge complexity \label{sec:oper}

The concept of economic complexity
grasps the ability of countries to export non-ubiquitous product groups,
which can only be traded by relatively few countries. The fact that a
country is able to export such sophisticated products competitively
should signal the existence of a large set of necessary latent (technological) capabilities which in turn should constitute a competitive advantage. Indeed, economic complexity has been shown to be superior
in predicting future economic growth of a country to other indicators
such as education and institutional quality (Hausmann et al., 2011). This
fundamental concept of economic complexity can be very well translated to (regional) knowledge production and has recently been applied in the context of knowledge complexity.
In this study, we follow this recent research direction of employing
the approach of Hidalgo and Hausmann (2009) to capture the
complexity of knowledge of spatial entities (countries or regions), using
their technological patent portfolio (patents of a specific technological
domain applied for in a specific region). Then we combine – in the same way as done
with exports for the economic complexity index – the diversity and
ubiquity of the patent portfolio of a country/region in
a knowledge complexity index for countries or regions (see e.g. Antonelli et al., 2017; Balland et al., 2019; Balland and Rigby, 2017; Ivanova et al., 2017; Whittle, 2017). In terms of interpretation, the knowledge complexity
index proposed by Balland and Rigby (2017) - and applied in this study - of countries or regions is
understood as their ability to create and sustain knowledge bases that
are non-ubiquitous in the system.

More specifically, a region's knowledge complexity is understood as a function of its diversity in terms of different technologies produced, and the ubiquity of these technologies, i.e. how many other regions are capable of producing and
‘exporting’ knowledge related to a specific technological field. Accordingly, the knowledge complexity of regions is based on the region-by-technology network matrix, representing the technological
portfolio of all regions as it connects each spatial entity $i=(1\ldots N)$ with technological fields $k=(1\ldots K)$ in which it is specialised in. Similar to previous literature we use the concept of Revealed Comparative
Advantage (RCA) by Balassa (1965) to find apparent specialisations of regions in technologies for the time period given by $t$ (subscript t omitted for clarity purposes).

\begin{align}
RCA_{ik} = \frac{X_{ik}}{\sum_k X_{ik}} / \frac{\sum_i X_{ik}}{\sum_i \sum_k X_{ik}}
\end{align}

The RCA of a region in a specific technological field is the ratio between the share of the region's knowledge production in this field and the share of the same technological field in the whole sample. $X_{ik}$ can be
any proxy of knowledge production of region $i$ in technology $k$. Similar to the majority of related literature, we use patent applications to account  for knowledge production. A value larger than one signals a relative regional specialisation in the specific field. Consequently, we define the matrix $M$ as 


\begin{align}
M_{ik} =  \begin{cases} &\text{1 } \ if \  RCA_{ik} >1 \\
                &\text{0 } \ if \ RCA_{ik} \le 1,
                \end{cases}
\end{align}

i.e. elements are set to 1 if a region is specialised in a certain technology,
and to zero otherwise. $M$ can – from a graph theoretic perspective – also
be described as a bipartite graph with two distinct sets of nodes (the $N$
regions and $K$ technological fields) where only nodes of different types
can be connected. Region $i$ is connected to field $k$ in the European
knowledge production network if, and only if, $M_{ik}=1$. The diversity in
knowledge production of region $i$ is then simply given by its degree
centrality, $d_i=\sum_k M_{ik}$. Analogously, the ubiquity of $k$ is equal to its
degree centrality, $u_k=\sum_i M_{ik}$. Hidalgo and Hausmann (2009) introduced the so-called *Method of Reflections* in order to infer the complexity of countries (and products) from the network of global exports of
products. Translated to our notation and applied to knowledge production, this iterative, self-referential algorithm (see equ. \ref{eq:mr}) takes regional diversification and the ubiquity of technological fields
and then recursively refines these variables with $n$ iterations to
yield estimates of regional and technological complexity $(d_i^n ; u_k^n)$.

\begin{align} \label{eq:mr}
\begin{cases}
d_i^n = \frac{1}{d_i^0} \sum_k M_{ik} \ u_k^{n-1} \\
u_k^n = \frac{1}{u_k^0} \sum_i M_{ik} \ d_i^{n-1}
\end{cases}
\end{align}

In other words, this algorithm produces generalised measures of
diversification and ubiquity where each iteration uses information from
previous iterations to yield a finer estimate of regional and technological
complexity, respectively. Each even iteration of $d_i^n$ is a finer estimate of
regional knowledge complexity, calculated as the average ubiquity of
technological fields (at iteration (n − 1)) in which this region is specialised in. Analogously, each uneven iteration of $u_k^n$ produces a better estimate of technological complexity as the average diversification of
regions (at iteration (n − 1)) that are able to produce knowledge in that
particular field.

## Theoretical framework and modelling approach {#sec-theo}

In order to explore the link between regional knowledge complexity and TFP, we adopt a spatial
econometric modelling approach. Conceptually, the modelling approach is inspired by the
extended regional knowledge capital model (KCM) that relates region-internal and regional-external knowledge to regional total factor productivity (Fischer, Scherngell and Reismann, 2009; LeSage and Fischer, 2012; Scherngell, Borowiecki and Hu, 2014). This extended version
of the famous knowledge capital model (Griliches, 1979) includes knowledge spillovers in
addition to internal knowledge capital in the production function.

Following the theoretical derivation in Scherngell et al. (2014), the extended regional
knowledge capital model leads to an expression of regional output in the form of:
 

\begin{align} \label{eq:q}
Q_{it}= L_{it}^\alpha  \  C_{it}^{\alpha-1} \ K_{it}^{\beta_1} \ {K_{it}^\star}^{\beta_2} .
\end{align}

Here, $Q$ refers to regional output, $L$ to labour input, $C$ to capital input, $K$ to region-internal and
$K^\star$ to region-external knowledge. Alpha is the output elasticity with respect to labour and
capital input. The indices $i$ and $t$ refer to region and time, respectively. As we believe that the
quality of knowledge or knowledge complexity of a region also needs to be taken into account,
we further extend this model by including region-internal and region-external knowledge
complexity.

\begin{align} \label{eq:qstar}
Q_{it}= L_{it}^\alpha  \  C_{it}^{\alpha-1} \ K_{it}^{\beta_1} \ {K_{it}^\star}^{\beta_2} \ CK_{it}^{\beta_3} \ {CK_{it}^\star}^{\beta_4}
\end{align}

As total factor productivity (TFP) is defined as output over conventional inputs (labour and
capital), equation \ref{eq:qstar} leads to:

\begin{align} \label{eq:p}
P_{it}= \ K_{it}^{\beta_1} \ {K_{it}^\star}^{\beta_2} \ CK_{it}^{\beta_3} \ {CK_{it}^\star}^{\beta_4} .
\end{align}

This relates region internal and external knowledge capital ($K$) as well as complex knowledge
capital ($CK$) to regional total factor productivity. Taking the log form of this expression and reframing the region-external variables as the product with $W$ (see below) gives:

\begin{align} \label{eq:plog}
p=  \beta_1 \, k +  \beta_2 \, W\, k +  \beta_3 \, ck \ + \beta_4 \, W \, ck ,
\end{align}

where lower case letters refer to logged (natural) variables. Here, region and time indices are
dropped for visual convenience. This equation already gives us a starting point for our empirical
modelling exercise to tease out whether knowledge capital and interestingly complex
knowledge capital can be shown to be positively associated with regional TFP development.
Because subnational regions are highly integrated into their environment in their economic but
also knowledge creation activities (as mentioned above), we suspect that estimating a regional
model according to equation \ref{eq:plog} would suffer from omitted variable bias. This is likely the case
as the spatial interconnectedness of regions is not well captured by the model. Following related
literature (Elhorst, 2014; Scherngell, Borowiecki and Hu, 2014) Scherngell et al (2014) we
thus include the spatial lag of the dependent variable (TFP) to yield as *spatial durbin model*
(SDM) of the form:

\begin{align} \label{eq:sdm-p}
p = \rho \, W \,p + \beta_1 \, k +  \beta_2 \, W\, k +  \beta_3 \, ck \ + \beta_4 \, W \, ck + \epsilon .
\end{align}

Following convention, $\rho$ refers to the coefficient of the spatial autoregressive process between
neighbouring regions. Note that in this model, regional total factor productivity might be
influenced by neighbouring productivity. The spatial weight matrix $W$ defines the assumed
neighbourhood structure of our model and serves to include space into the modelling framework via spatially lagging dependent and independent variables. The matrix $W$ will be defined in @sec-modelling and @sec-spatial. 


### Spatial econometric modelling {#sec-modelling}

Spatial models may be used to model spatial data, e.g. subnational regional data, where spatial dependence between observations may be expected. In such cases, the independent observation assumption of basic linear regression models may be violated which would lead to biased estimates. To remedy this, spatial effects are explicitly taken into account and modelled. In the example of the previously mentioned *spatial durbin model*, space enters the regression equation through a spatially lagged dependent and spatially lagged independent variables. The *spatial weight matrix*  $W$ is used to create such spatially lagged variables. The product of $W$ with a variable of interest yields a vector that includes weighted averages of neighbouring region's values of said variable.
A model including such spatial lags might be motivated purely statistically, as it allows to  control for possible spatial dependence within the data, aiming to reduce the bias a non-spatial model would suffer. However, it also enables the researcher to actually model inter-dependencies or spillovers between regions. More specifically, the model at hand (equation \ref{eq:sdm-p}) relates regional productivity development to region-internal (complex) knowledge capital as well as region-external (neighbouring) (complex) knowledge capital. Given that knowledge production activities are inherently collaborative and because these collaborations are increasingly conducted between cities, it is expected that regions will not only benefit from innovation activities within them but also in neighbouring cities. However, not only might neighbouring knowledge production activities influence productivity development, simply being well connected to growing cities might positively influence regions because of the various transfer of goods and services but also labour force that might occur between those regions. Including a spatial lag of the dependent variable allows to control for this. LeSage and Pace (2009) list a few more motivations of the SDM model, both statistical and theoretical.

To demonstrate the workings of the SDM in general, the basic cross-section SDM regression model (\ref{eq:sdm}) is explained below where $\rho$ refers to the coefficient of the spatial autoregressive process between neighbouring regions, $\alpha$ is the parameter associated with the intercept. As mentioned, the (N-by-N dimensional) *spatial weight matrix*  $W$ connects the regions by defining their neighbourhood structure. The independent variables are included via the (N-by-h) matrix $X$ with its associated vector of coefficients ($\beta$). Neighbouring regions' values are included in the model through the matrix $WX$ of dimension N-by-h and $\theta$ refers to the associated coefficient vector. The last term in equation \ref{eq:sdm} ($\epsilon$) refers to an *iid* error term of dimension N-by-1. 

It is obvious that this model suffers from endogenous variables on the right hand side. Even though the model might be expressed in an exogenous manner (reduced form, see \ref{eq:sdm-red}), OLS parameter estimates and standard errors will be inconsistent in the presence of spatial effects (LeSage and Pace, 2009). Following the majority of related literature, I adopt maximum likelihood (ML) estimation methods which yield consistent estimates. 

\begin{align} \label{eq:sdm}
y = \rho \,  W \,y + \alpha_{\iota N} + X \, \beta  + W \, X \, \theta  + \epsilon 
\end{align}

\begin{align} \label{eq:sdm-red}
y = (I_N - \rho W)^{-1} \, (\alpha_{\iota N}  + X \, \beta  + W \, X \, \theta  + \epsilon)  
\end{align}

For details on the proper estimation of SDM models using maximum likelihood, see, for example, LeSage and Pace (2009) or Elhorst (2014).

Including space into the modelling framework will not only make the estimation more challenging but also allows to model spatial or spillovers effects between regions. Because of the inclusion of spatial lags of the dependent and independent variables, a change in one region might not only affect the outcome in this region (direct effect) but potentially influence all other regions indirectly. While this enables the researcher to gain an insight into the interconnected nature and spatial dependence of regions, this also complicates the interpretation of the parameter estimates. In contrast to the classic linear regression model where the partial derivative of x equals the marginal effect and is given by the parameter estimate ($\frac{\partial E[y_i]}{\partial x_{ih}}= \hat{\beta_h}$), the marginal effect on $y_i$ from a change in variable $x_h$ in region $i$ is not equal to the estimated parameter $\beta_h$ in equation \ref{eq:sdm-red}. Not only this but the spillover effects that enter the model via $Wy$ and $WX$ also lead to the fact that a change in region $i$ might influence the dependent variable in all other regions $j\neq i$. In other words, the cross-partial derivative is not zero, as is always the case in the classic linear regression model. 

It can be shown that the partial derivative of $y$ with respect to $x_k$ in the SDM is a full matrix:

\begin{align} \label{eq:sdm-partial}
\frac{\partial y}{\partial x_{h}}= S = (I_N - \rho W)^{-1} \, (I \beta_h  + W \, X \, \theta_h)  .
\end{align}

The inverse matrix in equation \ref{eq:sdm-partial} and also in equation \ref{eq:sdm-red} may be used to explain the spatial dependence structure of the model. This may also be written as a Neumann series:

\begin{align} \label{eq:sdm-neumann}
 (I_N - \rho W)^{-1} = I + \rho W + \rho^2 W^2 + \rho^3 W^3 + \ldots 
\end{align}

Changes in independent variables in one region will have an influence on the region itself but also influence its neighbours depending on the estimated strength of the spatial autoregressive process ($\rho W$). In turn, effects will travel to the neighbours' neighbours ($\rho^2 W^2$) and so on. Because a region $i$ is also its neighbours neighbour, some part of the initial effect will feed back to the region itself. As $\rho$ is typically less than $1$, there is a decaying effect with the increasing order of neighbours. Closer neighbours will have a larger effect which makes intuitive sense.

As the partial derivatives of the SDM are not equal to the parameter estimates in equation \ref{eq:sdm-red} and as they are a full N-by-N matrix (see equation \ref{eq:sdm-partial}), there is the need to reduce these to some sort of summary measures. LeSage and Pace (2009) suggest calculating so-called total, direct and indirect impacts from the matrix $S$. The direct impacts are calculated as the average of the diagonal elements of $S$ and translate in the interpretation to the parameter estimates of the classic linear model. Average marginal effect of a change in independent variable in region $i$ on dependent variable of region $i$. However, since feedback loops are taken into account, this also includes the effect that travels through neighbours back to the original region. The total impact is calculated as the average over all elements of $S$ and can be interpreted as the average effect on $y$ resulting from changes in $x_k$ in all regions. Lastly, the indirect impact captures spillover effects to other regions. It is calculated as the average of the off-diagonal elements of $S$ or as the difference between total and direct impact. 

The significance of the impacts can then be estimated by bootstrapping standard errors with the help of the variance-covariance matrix from the ML estimations (LeSage and Pace, 2009).

## Data

As elaborated in the previous section, the main focus of this study is to analyse the relationship between regional complex knowledge capital and regional productivity while at the same time explicitly accounting for spatial dependence and spatial heterogeneity in regional innovation activities. We proxy regional innovation activities or knowledge production with patent applications to the European patent office (EPO) by inventors within *metropolitan regions* defined by EUROSTAT (2019). These regions aim to capture urban agglomerations in Europe and are defined as aggregates of NUTS-3 regions where at least 50\% of the population lives inside a functional urban area that is composed of $250.000$ or more inhabitants. 

We retrieve patent applications to the European Patent Office (EPO) by EU and EFTA inventors between
1996 and 2016 from the OECD REGPAT database, which offers regionalised patent data. Patents are allocated to NUTS-3 regions in the REGPAT database, where patents are attributed to regions by inventor residence. We map patents located in these NUTS-3 regions to *metropolitan regions* as defined by EUROSTAT and remove (fractional) patents that are located in peripheral regions according to this classification. Similar to related literature, we define knowledge capital as aggregates of patent applications of regional inventors using a five-year moving window. Patent applications associated with the year 2000 (the first period in the sample), for example, are then the sum of patent applications from years 1996 to 2000.  

Using patents mapped to *metropolitan regions*, it is then possible to calculate regional knowledge complexity scores for each period 2000-2016, following elaborations in Section \ref{sec:oper} and specifically Equation \ref{eq:mr}. Regional complex knowledge capital is then defined as the complexity weighted regional knowledge capital.
 
Regional productivity is calculated using regional output and regional production factor inputs of labour and capital.  
We define the regional total factor productivity index ($p$) adapted from Caves et al. (1982).


\begin{align}
p_{it} = q_{it} - s \, l_{it} - (1-s) \, c_{it}
\end{align}

Lower case letters refer to variables in logged form. Here, lower case $s$ is the assumed share of labour costs in the production process. Similar to related studies (e.g. Beugelsdijk, Klasing and Milionis, 2018), we set s equal
to $2/3$. Regional output ($q$) is measured via real regional gross value added. Labour input ($l$) is
the number of employees, adjusted by differences in the average working hours per country.
The capital stock of a region is defined as the five year sum of past real gross fixed capital
formation (investment). All non-patent variables described above are sourced for the period 2000 to 2021 from ARDECO. As the growth of productivity is arguably even more of relevance for policy decisions than the level of productivity per se, we focus in this analysis on the five-year growth rate of productivity as our main dependent variable. We define the five-year growth rate of productivity as the difference of $p_{i(t+5)}-p_{it}$. Consequently, the last year under investigation is $t=2016$ where the dependent variable refers to TFP growth from 2016 to 2021. 

Keeping only regions that produce at least $50$ patent applications per period (which is necessary to assure sensible knowledge complexity scores) and regions where output, labour and capital data is available until 2021, yields a balanced panel with 192 *metropolitan regions* and 17 time periods (2000-2016).

# Analysing European regional knowledge complexity in *R*

## Setup

Setting **knitr** options allows to define sensible standard settings for *echo*, *warning*, etc. as well as to define automatic saving of figures that are implemented in the quarto document.

```{r}
#| label: quarto-setup
#| echo: true
#| warning: false
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.path='Figs/')# dpi = 750)
```

Below I define a vector of packages needed in the following script that are all installed (if necessary) and attached. I will mention and describe the usage of specific packages in the following text, if relevant.

```{r}
#| label: packages


r = getOption("repos")
r["CRAN"] = "https://cran.wu.ac.at/"
options(repos = r)

## packages
list.of.packages <- c('MASS', 'rlang', "tidyverse", 'dplyr','tibble','purrr','slider',
                      'foreign','extrafont',
                      'grid', 'gridExtra', 
                      'ggplot2', 'ggrepel', 'lemon','viridis','colorspace',
                      'scales','wesanderson','RColorBrewer','ggthemes', 
                      'bookdown','knitr',
                      'kableExtra', 'DescTools',
                      'lme4','withr',
                      'tictoc',
                      'corrr','psych','corrplot',
                      'rgdal','spdep','sf','rnaturalearth',
                      'plm','splm','GWPR.light','spatialreg', 'modelsummary', 'broom','sjPlot','car',
                       'stargazer', 'export')

new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
invisible(lapply(list.of.packages, require, character.only = TRUE))

#load own package Pmisc, separate because devtools::install_github needs to be used
#devtools::install_github("PintarN/Pmisc")
library('Pmisc')


#devtools::install_github("RozetaSimonovska/SDPDmod", ref = "dev", build_vignettes = TRUE)
library('SDPDmod')

```

## Descriptive analysis

### Data preparation

For data manipulation and basic calculations I use almost exclusively functions and syntax from the [**tidyverse**](https://www.tidyverse.org/). This set of packages (including for example **dplyr**) introduces a variety of functions for several data handling or data science operations. Furthermore it introduces a intuitive way to link operations on a single object with the so-called *pipe* (%>%). 

```{r}
#| label: load-data

#load balanced panel with data
metro.panel.load <- readRDS(file = '../data/metro_balanced_panel_calc_070124.rds')

#limiting to main variables and renaming to make consistent
#the suffix _f always refers to fractional counting of patents, ck refers to 
#complex knowledge capital whereas k refers to knowledge capital, 
#ECI refers to the economic complexity index (which is used to proxy complex knowledge) 
#and ECI_f_wt then to the complexity weight used to weight knowledge capital to yield complex knowledge capital
metro.panel <- metro.panel.load %>% 
  dplyr::select(metro_code, metro_name, year,tfp, 
                ln_gva, ln_emp_wt, ln_cap, ln_k_f, 
                ln_ck_f = ln_kc_f,ECI_f_wt)

```

```{r}
#| label: growths

#calculate five-year growth rates of tfp, the main dependent variable
metro.panel <- metro.panel %>% dplyr::group_by(metro_code) %>% dplyr::mutate(
  tfp_gr_5 = dplyr::lead(tfp,5) - dplyr::lead(tfp,0),
  tfp_gr_5_pt = 100*tfp_gr_5
  ) %>% ungroup()

```

I store my data in *tibbles* which is a form of *dataframe* and behaves basically the same with a few cosmetic differences. The main dataset looks as follows:

```{r}
metro.panel
```

Before doing any proper data analysis, I create summary descriptive statistics for each variable and each year.

```{r}
#| label: summary-stats

#create list of all numeric variables of interest
summary.variables <- as.list(metro.panel %>% dplyr::select(-year) %>% 
                               dplyr::select_if(~ is.numeric(.)) %>% colnames())

names(summary.variables) <- metro.panel %>% dplyr::select(-year) %>% 
  dplyr::select_if(~ is.numeric(.)) %>% colnames()

#calculate yearly summary statistics, exemplary for tfp, tfp growth and ln_ck_f

#tfp
zeros <- metro.panel %>% group_by(year) %>% select(year, tfp) %>% 
  dplyr::count(zeros = tfp ==0) %>% dplyr::filter(zeros == T) %>% 
  select(-zeros) %>% dplyr::rename(zeros = n)

summary.variables$tfp <- metro.panel %>% group_by(year) %>% 
  select(year, tfp) %>% dplyr::summarise(summary = list(summary(tfp)))  %>% 
  tidyr::unnest_auto(col = summary) %>% dplyr::left_join(zeros, by = 'year') 

#tfp growth
zeros <- metro.panel %>% group_by(year) %>% select(year, tfp_gr_5_pt) %>% 
  dplyr::count(zeros = tfp_gr_5_pt ==0) %>% dplyr::filter(zeros == T) %>% 
  select(-zeros) %>% dplyr::rename(zeros = n)

summary.variables$tfp_gr_5_pt <- metro.panel %>% group_by(year) %>% 
  select(year, tfp_gr_5_pt) %>% dplyr::summarise(summary = list(summary(tfp_gr_5_pt)))  %>% 
  tidyr::unnest_auto(col = summary) %>% dplyr::left_join(zeros, by = 'year') 

#ln_ck_f
zeros <- metro.panel %>% group_by(year) %>% select(year, ln_ck_f) %>% 
  dplyr::count(zeros = ln_ck_f ==0) %>% dplyr::filter(zeros == T) %>% 
  select(-zeros) %>% dplyr::rename(zeros = n)

summary.variables$ln_ck_f <- metro.panel %>% group_by(year) %>% 
  select(year, ln_ck_f) %>% dplyr::summarise(summary = list(summary(ln_ck_f))) %>% 
  tidyr::unnest_auto(col = summary) %>% dplyr::left_join(zeros, by = 'year') 

```

### Basic descriptives

Using **kableExtra** I can easily create formatted latex tables that are included in the report.

```{r}
#| label: summaries

#tfp
#change 1d table in df to double for kable to work
summary.table.tfp <- summary.variables$tfp %>% 
  mutate(dplyr::across(.cols = 2:8, as.numeric))

#use kable to format and create latex code for table
kableExtra::kable(summary.table.tfp, format = 'latex',booktabs = T,
                  linesep = "",digits = 2,row.names = F, 
                  caption = 'TFP summary statistics \\label{tab:summ-tfp}') %>% 
  kable_styling(font_size = 7, latex_options = 'striped')

#tfp growth
#change 1d table in df to double for kable to work
summary.table.tfp.gr <- summary.variables$tfp_gr_5_pt %>% 
  mutate(dplyr::across(.cols = 2:8, as.numeric))

#use kable to format and create latex code for table
kableExtra::kable(summary.table.tfp.gr, format = 'latex',booktabs = T,
                  linesep = "",digits = 2,row.names = F,
                  caption = 'TFP five-year growth, summary statistics \\label{tab:summ-tfpgr}') %>% 
  kable_styling(font_size = 7, latex_options = 'striped')

#complex knowledge capital 
#change 1d table in df to double for kable to work
summary.table.ck <- summary.variables$ln_ck_f %>% 
  mutate(dplyr::across(.cols = 2:8, as.numeric))

#use kable to format and create latex code for table
kableExtra::kable(summary.table.ck, format = 'latex',booktabs = T,
                  linesep = "",digits = 2,row.names = F,
                  caption = 'Complex knowledge capital, summary statistics \\label{tab:summ-ck}') %>% 
  kable_styling(font_size = 7, latex_options = 'striped')

```

As can be seen in the summary statistic of the level of TFP (Table \ref{tab:summ-tfp}) and even more so in  the five-year growth rate of TFP 
(Table \ref{tab:summ-tfpgr}) the great recession and the covid pandemic have had a visible effect on total factor productivity in the sample regions. We can see in the summary statistics of the growth of TFP that the sample only reaches until 2016 which is correct because we have introduced a five-year lag. We limit our analysis thus to periods 2000-2016. 

```{r}
#| echo: false

metro.panel <- metro.panel %>% filter(year < 2017)

```

Next, we can analyse the basic correlation between our variables of interest. To create nice-looking correlation plots, I use
**corr** to create an exemplary correlation plot for the year 2010.

```{r}
#| label: fig-corr
#| include: true
#| eval: true
#| fig-cap: "Correlation table of main variables of interest, 2010"
#| fig-width: 6
#| fig-height: 6
#| out-width: 60%

#limit df to 2010
cor.2010.temp.df <- metro.panel %>% filter(year == 2010) %>% 
  select(-year, -metro_code, -metro_name, -tfp_gr_5_pt) 

#calculate correlation
cor.2010.temp <- cor.2010.temp.df %>% cor() %>% round(digits = 2)

#significance levels
cor.2010.p.temp <- cor.2010.temp %>%  corrplot::cor.mtest(conf.level = 0.9)

#corplot
corrplot::corrplot(cor.2010.temp, #sig.level = 0.05, p.mat = cor.2010.p.temp$p, insig = 'blank', 
         method = 'color', order = 'original', diag = FALSE, type = 'lower', 
         addCoef.col = 'grey15', tl.col = 'grey15',
         tl.srt = 45, cl.ratio = 0.2, number.font = 1
         ) 


```

As we can see in the correlation plot. The level of TFP is moderately correlated with both the knowledge capital and complex knowledge capital. However, we also see that the growth of TFP is negatively related with the level, signalling a convergence or size effect of less developed regions (im terms of TFP) growing more rapidly. What is also interesting is that while the effect of knowledge capital on the level of TFP is positive, knowledge capital is actually negatively related with the growth in TFP. However, the effect of complex knowledge capital on growth of TFP is not significantly different from zero in this unconditional cross-sectional correlation analysis.

### Mapping European complex knowledge production

As this study takes spatial dependence between regional innovation activities seriously, I first want to show the spatial distribution
of the main variables of interest. In a first step I create maps to visually display a potential spatial dependence between European metro regions in their knowledge production activities. After visually 'checking' for spatial dependence or spatial heterogeneity in the main variables of interest, I run a so-called *Moran's I* test to statistically test whether the observed spatial distribution is actually different from random.  

The **sf** package can be used for a multitude of spatial operations, such as reading and manipulating a map. The function **sf::st_read** 
can be used to read so-called shapefiles as ojects of class *sf* that both include mapping information (polygons, coordinate systems, projections, etc.) and data in form of a *dataframe*. This allows easy visualisations of spatial data.

```{r}
#| label: maps-prepare
#| echo: true
#| eval: true

##create country background map

#load downloaded map file (shapefile) from EUROSTAT
map.country.load <- sf::st_read( './data/shp/CNTR_RG_60M_2013_3035.shp')

map.country <- map.country.load

#only keep countries from the sample
countries.keep <- c('ES','FI','FR','BE', 'BG','AT','EL','CY','CZ','CH','DE','DK',
                    'EE','LT','LU',"LV", 'NL','IE','HR','HU','MT','IT','RO','NO','PL','SE','SI',
                    'SK','UK','PT')

map.country.used <- map.country %>% filter(FID %in% countries.keep)

#map.country.used %>% select(geometry) %>% plot()

#load pre-prepared metro map .rds, 
map.metro <- readRDS(file = '../data/maps/metro_map.rds')

# ggplot() +
#   geom_sf(data = map.metro ) +
#   #axis limits and coords
#   coord_sf(xlim = c(2500000, 6000000),
#            ylim = c(1500000, 5300000))

```

```{r}
#| label: maps-df-create-1
#| eval: true

## Df related
#calculate average tfp growth over time and also average complexity weight, for mapping
metro.panel.avg <- metro.panel %>% group_by(metro_code) %>% 
  dplyr::summarise(avg_tfp_gr_5_100 = 100*mean(tfp_gr_5), avg_ck_wt = mean(ECI_f_wt))

#join data to map file and create last year only map file, don't need the other years for mapping
##add growth variables to last year
map.metro.t2 <- map.metro %>% select(metro_code, metro_name,  geometry) %>% distinct() %>%
  mutate(t=2) %>% left_join(metro.panel %>% filter(year == 2016) %>% 
                              select(metro_code, tfp, year)) %>% 
  left_join(metro.panel.avg , by = c('metro_code')) 

#rename periphery to non na
map.metro.t2 <- map.metro.t2 %>% mutate(type = dplyr::case_when(
  metro_name == "periphery"  ~ "periphery", 
  TRUE ~ "metro region"))


## Map related
#calculate median values of variables to be mapped for color scale
med.tfp.t2 <- map.metro.t2 %>% filter(t==2, !is.na(tfp)) %>% pull(tfp) %>% median()
med.ck.wt <- map.metro.t2 %>% filter(t==2, !is.na(avg_ck_wt)) %>% pull(avg_ck_wt) %>% median()

#define colors for map
col.periphery <- 'white'
col.background <- 'grey95'
col.na <- 'grey60'
#from colorbrewer sequential multhue (discrete) scale
#https://colorbrewer2.org/#type=sequential&scheme=YlGnBu&n=9
col.low <- colorspace::lighten('#ffffd9',0.0)
col.mid <- '#41b6c4'
col.high <- lighten('#081d58',-0.5) 

#show_col(c(col.high,col.mid, col.low, col.periphery, col.na,col.background ))


#create maps

#tfp distribution t=2
M.tfp.t2 <- ggplot() + 
  #add country background with periphery color first, thin country lines
  geom_sf(data = map.country, fill = col.background, linewidth = 0.25, color = 'grey75') +
  #to get type legend
  geom_sf(data = map.metro.t2 %>% filter(t == 2),  aes(color = type)) +
  #change color of color
  scale_color_manual(values = c(col.na,col.periphery),labels = c("NA\nmetro region", "periphery")) +
  #fill all regions with periphery colour
  geom_sf(data = map.metro.t2 %>% filter(t == 2), fill = col.periphery) + 
  #add metro regions polygons
  geom_sf(data = map.metro.t2 %>% filter(t == 2)  %>% filter(metro_name != "periphery"), 
          aes(fill = tfp)) +
  #color palette
  scale_fill_gradient2(low = col.low,
                      mid = col.mid,
                      high = col.high,
                      midpoint = med.tfp.t2,
                      na.value = col.na,
                      name = "TFP",
                     guide = guide_colorbar( order = 1,
                                              direction = "vertical",
                                              barheight = unit(50, units = "mm"),
                                              barwidth = unit(2, units = "mm"),
                                              draw.ulim = F,
                                              title.position = 'top',
                                              # some shifting around
                                              title.hjust = 0.4,
                                              label.hjust = 0.5)) +
  #add metro borders
  geom_sf(data = map.metro.t2, linewidth = 0.1, color = "grey30", alpha=0) + 
  #add country borders
  geom_sf(data = map.country, linewidth = 0.5, color = "grey10", alpha = 0) +
  #coord and limits
  coord_sf(xlim = c(2500000, 6000000), 
           ylim = c(1500000, 5300000)) +
  #title
  labs(x = NULL, y = NULL,
       #title = 'TFP distribution of European metropolitan regions; 2016'
       ) +
  guides(color = guide_legend(override.aes = list(size = 5,color = 'grey30',
                                                  fill = c(col.na,col.periphery)), 
                              title = NULL, order = 2)) +
  #theme
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank()) +
  theme(text = element_text(family = 'Times', size = 12),
        legend.position = c(0.1,0.6), 
        legend.background = element_rect(fill = 'transparent'),
        panel.grid.major = element_line(colour = 'grey85'),
        panel.grid.minor = element_blank(), 
        #plot.background = element_rect(fill = "white", color = NA), 
        panel.background = element_rect(fill = "white", color = NA), 
  ) 
  

#M.tfp.t2


```

```{r}
#| label: maps-df-create-2
#| echo: false
#| eval: true

#create the other two maps, without echo

#complexity weight
M.ck.wt <- ggplot() + 
  #add country background with periphery color first, thin country lines
  geom_sf(data = map.country, fill = col.background, linewidth = 0.25, color = 'grey75') +
  #to get type legend
  geom_sf(data = map.metro.t2 %>% filter(t == 2),  aes(color = type)) +
  #change color of color
  scale_color_manual(values = c(col.na,col.periphery), labels = c("NA\nmetro region", "periphery")) +
  #fill all regions with periphery colour
  geom_sf(data = map.metro.t2 %>% filter(t == 2), fill = col.periphery) + 
  #add metro regions polygons
  geom_sf(data = map.metro.t2 %>% filter(t == 2)  %>% filter(metro_name != "periphery") , aes(fill = avg_ck_wt)) +
  #color palette
  scale_fill_gradient2(low = col.low,
                      mid = col.mid,
                      high = col.high,
                      midpoint = 2,
                      na.value = col.na,
                      name = "complexity \nscore",
                     guide = guide_colorbar( order = 1,
                                              direction = "vertical",
                                              barheight = unit(50, units = "mm"),
                                              barwidth = unit(2, units = "mm"),
                                              draw.ulim = F,
                                              title.position = 'top',
                                              # some shifting around
                                              title.hjust = 0.4,
                                              label.hjust = 0.5)) +
  #add metro borders
  geom_sf(data = map.metro.t2, linewidth = 0.1, color = "grey30", alpha=0) + 
  #add country borders
  geom_sf(data = map.country, linewidth = 0.5, color = "grey10", alpha = 0) +
  #coord and limits
  coord_sf(xlim = c(2500000, 6000000), 
           ylim = c(1500000, 5300000)) +
  #title
  labs(x = NULL, y = NULL,
       #title = 'TFP distribution of European metropolitan regions; 2016'
       ) +
  guides(color = guide_legend(override.aes = list(size = 5,color = 'grey30',
                                                  fill = c(col.na,col.periphery)), 
                              title = NULL, order = 2)) +
  #theme
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank()) +
  theme(text = element_text(family = 'Times', size = 12),
        legend.position = c(0.1,0.6), 
        legend.background = element_rect(fill = 'transparent'),
        panel.grid.major = element_line(colour = 'grey85'),
        panel.grid.minor = element_blank(), 
        #plot.background = element_rect(fill = "white", color = NA), 
        panel.background = element_rect(fill = "white", color = NA), 
  ) 
  

#M.ck.wt


#growth colours
#from colorbrewer diverging (discrete) scale https://colorbrewer2.org/#type=diverging&scheme=RdYlBu&n=11
col.low <- '#d73027'
col.mid <- '#ffffbf'
col.high <- '#01665e'
col.high <- darken('#abd9e9',0.5) 


#tfp growth
M.tfp.gr <- ggplot() + 
  #add country background with periphery color first, thin country lines
  geom_sf(data = map.country, fill = col.background, linewidth = 0.25, color = 'grey75') +
  #to get type legend
  geom_sf(data = map.metro.t2 %>% filter(t == 2),  aes(color = type)) +
  #change color of color
  scale_color_manual(values = c(col.na,col.periphery), labels = c("NA\nmetro region", "periphery")) +
  #fill all regions with periphery colour
  geom_sf(data = map.metro.t2 %>% filter(t == 2), fill = col.periphery) + 
  #add metro regions polygons
  geom_sf(data = map.metro.t2 %>% filter(t == 2)  %>% filter(metro_name != "periphery") , aes(fill = avg_tfp_gr_5_100)) +
  #color palette
  scale_fill_gradient2(low = col.low,
                      mid = col.mid,
                      high = col.high,
                      midpoint = 0,
                      na.value = col.na,
                      name = "TFP growth (%) \n(5y avg.)",
                     guide = guide_colorbar( order = 1,
                                              direction = "vertical",
                                              barheight = unit(50, units = "mm"),
                                              barwidth = unit(2, units = "mm"),
                                              draw.ulim = F,
                                              title.position = 'top',
                                              # some shifting around
                                              title.hjust = 0.4,
                                              label.hjust = 0.5)) +
  #add metro borders
  geom_sf(data = map.metro.t2, linewidth = 0.1, color = "grey30", alpha=0) + 
  #add country borders
  geom_sf(data = map.country, linewidth = 0.5, color = "grey10", alpha = 0) +
  #coord and limits
  coord_sf(xlim = c(2500000, 6000000), 
           ylim = c(1500000, 5300000)) +
  #title
  labs(x = NULL, y = NULL,
       #title = 'TFP distribution of European metropolitan regions; 2016'
       ) +
  guides(color = guide_legend(override.aes = list(size = 5,color = 'grey30',
                                                  fill = c(col.na,col.periphery)), 
                              title = NULL, order = 2)) +
  #theme
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank()) +
  theme(text = element_text(family = 'Times', size = 12),
        legend.position = c(0.1,0.55), 
        legend.background = element_rect(fill = 'transparent'),
        panel.grid.major = element_line(colour = 'grey85'),
        panel.grid.minor = element_blank(), 
        #plot.background = element_rect(fill = "white", color = NA), 
        panel.background = element_rect(fill = "white", color = NA), 
  ) 
  

#M.tfp.gr


```

For actually visualising the spatial data and creating the map I am relying on **ggplot2** and specifically the *ggplot* function. This allows to create any kinds of data visualisation (e.g. histograms,  scatterplots, maps, etc.) in an easy and modular way by chaining different visual elements together with the '+' operator. Using this approach, I can intuitively create relatively complex maps that such as the choropleth map of the distribution of TFP (@fig-map-tfp-2016) include multiple legends, layers of different polygons (regions, countries) and the like. 

```{r}
#| label: fig-map-tfp-2016
#| echo: false
#| include: true
#| eval: true
#| fig-cap: "TFP distribution of European metropolitan regions, 2016"
#| fig-width: 7
#| fig-height: 7
#| out-width: 90%

M.tfp.t2

```

Comparing the spatial distribution of the level of TFP with the distribution of the average of the five-year growth rate of TFP (our main dependent variable), highlights that some city-regions both have a high level of TFP and experienced high growth over the last two decades (e.g. Cork, Ireland). However, mostly the two maps reveal that regions with low level of TFP tend to have experienced the highest growth (as also evidenced by the correlation plot above).

```{r}
#| label: fig-map-tfp-gr
#| echo: false
#| include: true
#| eval: true
#| fig-cap: "TFP growth distribution of European metropolitan regions, 2000-2021"
#| fig-width: 7
#| fig-height: 7
#| out-width: 90%

M.tfp.gr

```

Mapping the average knowledge complexity score over time for each *metropolitan region* (@fig-map-ck-wt) offers interesting insights. First, it is interesting that knowledge complexity does not seem to go hand-in-hand with region size. While large cities (e.g. London, Paris, Munich) in terms of knowledge production do have relatively high complex knowledge production, they do not top the ranking. Instead a mix of middle-sized and middle-to-large-sized city-regions seem to be able to produce the most complex knowledge (Rennes in France, Stockholm and Eindhoven in the Netherlands). The fact that regional knowledge complexity seems to capture a different dynamic than (non-complex) knowledge complexity is encouraging for the following inferential analysis in @sec-inf.

```{r}
#| label: fig-map-ck-wt
#| echo: false
#| include: true
#| eval: true
#| fig-cap: "Regional knowledge complexity, average 2000-2016"
#| fig-width: 7
#| fig-height: 7
#| out-width: 90%

M.ck.wt

```


### Testing for spatial dependence {#sec-spatial}

Visually inspecting the spatial distribution of the variables of main interest of this study, it can be assumed that productivity and also knowledge production activities are not randomly distributed around Europe. In order to test whether the null hypothesis of a random distribution of our variables of interest in space must be rejected, I run a so-called *Moran's I* test. For this test - and also the spatial models presented in @sec-inf -, it is necessary to explicitly define a likely neighbourhood structure of the sample regions. Typically, neighbourhood is defined using geographical location in some way. This could be bilateral distance or contiguity (bordering of regions). It is also possible to define neighbourhood of regions not using the geographical location at all. For example, bilateral trade flows or connections between companies and research institutes in research projects could be the basis for the definition of a neighbourhood structure. Following the majority of the related literature and also because it makes sense with city-regions that typically don't directly border each other, I use a so-called *k*-nearest neighbour definition. More specifically, each *metropolitan region* gets attributed $k=5$ neighbours, the geographically closest ones. This serves as a good proxy for general geographical location and does not isolate islands or peripheral regions completely from the modelling exercises later. This neighbourhood information is saved in a so-called *spatial-weights matrix* (typically called $W$) that is of dimension N-by-N and connects each region $i$ with its neighbouring region $j$, if $w_{ij}>0$. To ease interpretation in the regression analysis later on, values of $W$ are binarised and the matrix is row-standardised.

Using the aforementioned **sf** and also the **spdep** package allows to easily extract the geographical information to create a *spatial-weight matrix* from the map object (of class *sf* dataframe) and create a corresponding *R* object of class *listw* that can be used in several spatial econometric modelling functions. 


```{r}
#| label: w-create

#create the k=5 nearest neighbour spatial weight matrix 

#only use metro regions to create W
map.metro.only <- map.metro.t2 %>% filter(metro_name != 'periphery', !is.na(tfp))
#plot(st_geometry(map.metro.only))

#extract coordinates from centroids of metro regions
coords <- sf::st_coordinates(sf::st_centroid(map.metro.only)) 
coords <- coords / 100000

#creating list of class knn with neighbourhood information
k.5.knn <- spdep::knearneigh(coords, k = 5)
#converting to a neighour list object nb
k5.nb <- spdep::knn2nb(k.5.knn)
k5.nb
#converting to listw object for further use in modelling, style = W for row-standardisation
k5.listw <- spdep::nb2listw(k5.nb, style = 'W')


```

```{r}
#| label: w-plot
#| fig-cap: "Neighbourhood structure of the sample, 5-nearest neighbours"
#| include: false
#| fig-width: 9
#| fig-height: 9
#| out-width: 75%


#plot the neighbourhood structure

k5.plot1 <- plot(k5.listw, map.metro.t2 %>% filter(!is.na(tfp)) %>% st_centroid() %>% st_coordinates(), col = 'indianred', lwd=0.5)
k5.plot2 <- plot(map.metro.t2 %>% select(metro_code, geometry), col = 'white', add= T, lwd=0.5)
plot(k5.listw, map.metro.t2 %>% filter(t==2,!is.na(tfp)) %>% st_centroid() %>% st_coordinates(),col = 'indianred', add = T, lwd=1)

```

Using the function **spdep::moran.test**, I can run the *Moran's I* test on the main variables of interest. Again, I use the year 2010 as an example. 


```{r}
#| label: morans-i

#run moran's I tests on variables of interest with 5-nearest neighbours neighbourhood structure

#tfp
moran.test.tfp <- spdep::moran.test(metro.panel %>% filter(year == 2010) %>% 
                                      pull(tfp), listw = k5.listw)
moran.test.tfp

#tfp growth
moran.test.tfp.gr <- spdep::moran.test(metro.panel %>% filter(year == 2010) %>% 
                                         pull(tfp_gr_5), listw = k5.listw)
moran.test.tfp.gr

#complex knowledge
moran.test.ck.wt <- spdep::moran.test(metro.panel %>% filter(year == 2010) %>% 
                                     pull(ECI_f_wt), listw = k5.listw)
moran.test.ck.wt

#complex knowledge capital
moran.test.ck <- spdep::moran.test(metro.panel %>% filter(year == 2010) %>% 
                                     pull(ln_ck_f), listw = k5.listw)
moran.test.ck

#knowledge capital
moran.test.k <- spdep::moran.test(metro.panel %>% filter(year == 2010) %>% 
                                     pull(ln_k_f), listw = k5.listw)
moran.test.k

```

As can be seen in the output, all main variables of interest exhibit a significant spatial dependence along the defined neighbourhood structure, as evidenced by the *Moran's I* statistic that is significantly different from zero.  


## Inferential analysis {#sec-inf}

After examining basic descriptive relationships between the variables of interest and also visually inspecting the spatial distribution both of the dependent variable and also of the main variable of interest (complex knowledge production), an inferential analyis is needed to tease out the actual *controlled* relationships between these variables. While the main independent variables are knowledge capital, complex knowledge capital and their spatially lagged counterpart (see @sec-theo), the balanced panel structure of the data allows me to also control for unobserved unit and time fixed effects, possibly reducing the omitted variable bias considerably.

### Non-spatial model

In a first step, a fixed effects (within) linear panel model is estimated via OLS before any proper spatial modelling is attempted. While this is not a spatial model per se, spatially lagged versions of the two independent variables are included, as motivated in @sec-theo. This model could also be called a *spatial-lag of X* (SLX) model and can be consistently estimated via OLS (see, e.g. LeSage and Pace, 2009).     


```{r}
#| label: add-vars
#| echo: false

#add spatially lagged vars for modelling 

#load all vars
metro.panel.all.vars <- readRDS(file = '../data/metro_panel_final_070124.rds')


metro.panel.vars.sel <- metro.panel %>% left_join(metro.panel.all.vars %>% select(metro_code, year, ln_k_f_lag_k5, ln_ck_f_lag_k5)
                                                    )

#rename for better legibility
metro.panel.vars.sel <- metro.panel.vars.sel %>% 
  rename(tfp_growth = tfp_gr_5_pt,tfp_growth = tfp_gr_5_pt, 
         knowledge_cap = ln_k_f, complex_knowledge_cap = ln_ck_f,
         splag_knowledge_cap = ln_k_f_lag_k5, 
         splag_complex_knowledge_cap = ln_ck_f_lag_k5)


```

```{r}
#| label: make-panel
#| echo: true

#define panel structure
metro.panel.pdf <- plm::pdata.frame(metro.panel.vars.sel, index = c('metro_code','year'))
```

```{r}
#| label: model-slx

#estimate SLX model via OLS, fixed effects
formula <- tfp_growth ~ knowledge_cap + complex_knowledge_cap + 
                       splag_knowledge_cap + splag_complex_knowledge_cap

model.slx.fe <- plm::plm(formula = tfp_growth ~ knowledge_cap + complex_knowledge_cap + 
                       splag_knowledge_cap + splag_complex_knowledge_cap,
                      data = metro.panel.pdf, model = 'within', effect = 'twoways')

summary(model.slx.fe)

```

Using the **plm** package it is straightforward to estimate a linear panel model with time and unit fixed effects ('twoways'). Using the Hausman Test from the **plm** package, I can test whether the *random* or *fixed* effects model is preferred. Given that the null hypothesis (both the random and fixed effects estimates are consistent) needs to be rejected, I select the *fixed* effects model as the preferred one.

```{r}
#| label: hausman-test

#run model with random effects
model.slx.re <- plm::plm(formula = tfp_growth ~ knowledge_cap + complex_knowledge_cap + 
                       splag_knowledge_cap + splag_complex_knowledge_cap,
                      data = metro.panel.pdf, model = 'random', effect = 'twoways')

#Hausman Test
plm::phtest(model.slx.re,model.slx.fe)

```

Inspecting the output of the fixed effects model (above) and specifically the  F-statistic suggests that the variables of interest may, in addition to time and unit fixed effects, be helpful in explaining the within variance of the data.  

Using the **sjPlot** package I can easily generate a coefficient estimate plot (@fig-model-slx-plot) where the coefficient estimates can be visually inspected. 

```{r}
#| label: fig-model-slx-plot
#| fig-cap: "Coefficient estimates plot, SLX"
#| fig-width: 6
#| fig-height: 6
#| out-width: 75%

#plot coefficient estimates

sjPlot::plot_model(model.slx.fe, show.values = T, colors = c(col.high)) + 
    theme_minimal() + geom_hline(aes(yintercept = 0), linewidth = 1, color = 'grey25')

```

The coefficient estimates correspond to the main variables of interest as described in @sec-theo where *splag* refers to the spatially lagged version of knowledge capital and complex knowledge capital, respectively. Interestingly, complex knowledge capital does not seem to have an impact on future total factor productivity and regular knowledge capital even contributes to a slowing of productivity. In contrast, neighbouring non-complex knowledge production and also complex knowledge production is estimated to significantly increase future productivity, suggesting that the embeddedness of a region into their immediate surroundings is important in economic terms and also that spatial effects should not be omitted from the model. Using the **car::VIF** function to estimate variance inflation factors, suggests that this model does not suffer from multicollinearity.

```{r}
#| label: model-slx-vif

#run pooling model to calculate variance inflation factors
model.slx.pool <- plm::plm(formula = tfp_growth ~ knowledge_cap + complex_knowledge_cap + 
                       splag_knowledge_cap + splag_complex_knowledge_cap,
                      data = metro.panel.pdf, model = 'pooling')

car::vif(model.slx.pool)

```

The **sjPlot** package allows to plot the residuals and fitted values for each independent variable for panel models to visually inspect how well actual and predicted values of the outcome fit across the predictor variables.


```{r}
#| label: model-slx-residual-plot-create
#| eval: false
#| echo: false
#| include: false


#plot residuals
resid.plot <- sjPlot::plot_residuals(model.slx.fe, geom.size = 1, show.lines = T, show.pred = T,
                       show.resid = T,show.ci = T) + theme_minimal()

#ggsave 
ggsave(filename = paste(getwd(),"./Figs/g_resid_plot.png" ,sep = ""), plot = resid.plot, device = "png", dpi = 500, height = 7,
       width = 7)

```

![Residual plots, SLX](./Figs/g_resid_plot.png){#fig-resid-plot}

While there are obviously outlier observations with high residuals, these are not necessarily observed within the same quantile of the independent variables and thus do not seem to lead to bad or systematic behaviour of the residuals. The darker circles in @fig-resid-plot refer to the fitted values which are linked with a line to the observed values, forming the residuals.

If the error term in a linear model exhibits spatial dependence, the assumption of uncorrelated errors is violated, resulting in at least inefficient estimates. We can test this by running a *Moran's I* test on the residuals of the model. Again, I use 2010 as an example year. 

```{r}
#| label: model-slx-residuals

#extract residuals for year 2010
resids.temp <- dplyr::tibble(residuals = residuals(model.slx.fe),
                             attr(residuals(model.slx.fe), 'index')) %>%
  filter(year == 2010) %>% pull(residuals)

moran.test(resids.temp, listw = k5.listw)

```

It turns out, even though spatial effects are somewhat already controlled for in the model - through the spatially lagged predictors - there is still significant spatial autocorrelation in the residuals. This indicates that it might be best to properly model spatial effects in order to eliminate the remaining spatial autocorrelation in the residuals. There are several options of popular spatial econometric models used in related literature, introducing explicit (modelled) spatial dependence either in the error term, the independent variables (SLX), the dependent variable or a combination thereof. If regional TFP actually depends on neighbouring TFP, meaning that positive spillovers exist and regions benefit from being close to highly productive other regions (ceteris paribus), employing a model that does not account for this (like the SLX) will lead to biased estimates. As there are multiple different model variants to choose from, I take an agnostic approach and estimate Bayesian log-marginal posterior probabilities to identify the model that best explains the data. With the package **SDPDmod**, this is easily done. 

```{r}
#| label: bayesian-post-prob

#calculate bayesian posterior probabilities to decide proper spatial model

#create matrix object of spatial weight matrix (listw)
k5.mat <- listw2mat(k5.listw)
k5.mat[1:5,1:5]

bpp <- SDPDmod::blmpSDPD(formula, data = metro.panel.pdf,
                W = k5.mat,
                effect = 'twoways',
                index  = c('metro_code','year'), 
                prior = 'beta',
                model = list("ols","slx","sar","sdm","sem","sdem")
                )
bpp$probs
```

Using bayesian methods, this allows to estimate the (spatial) model that best explains the data. It seems that the *spatial durbin model* (SDM) is best equipped to explain the effects of knowledge production on regional TFP growth. Consequently, this model is adapted.

### Spatial model

Once a spatial model is employed that not only introduces space in the error term or independent variables but also allows neighbouring regions' explained variable to directly affect a regions total factor productivity, basic OLS estimation will be biased if this spatial effect is significant (LeSage and Pace, 2009; Elhorst, 2014). To avoid this, a maximum likelihood (ML) approach is typically used by researchers and implemented by software packages (e.g., **plm**). As already mentioned in @sec-theo, adopting a proper spatial model complicates the interpretation of coefficient estimates due to direct and indirect spillover effects. As is usual in related literature, I use the ML coefficient estimates for the independent variables and the spatial lag coefficient together to produce direct, indirect and total impact estimates (see LeSage and Pace; 2009). The **SDPDmod** package offers both ML estimation of the panel fixed effects SDM model as well as calculation of impacts estimates (with bootstrapped standard errors).

```{r}
#| label: model-sdm

#use sdpdmod to estimate model and also impact estimates as spml does not properly
#do sdm impacts for panel models

model.sdm.fe <- SDPDmod::SDPDm(tfp_growth ~ knowledge_cap + complex_knowledge_cap, 
                               data = metro.panel.pdf,
                               W = k5.mat,
                               index  = c('metro_code','year'),
                               model = 'sdm',
                               effect = 'twoways')

summary(model.sdm.fe)

```

Interpreting the results for the SDM model and comparing them to the SLX model, reveals both similarities and differences. First, the introduced spatial autoregressive coefficient (rho) is positive and highly significant. European metropolitan regions benefit in their productivity development from being near growing city-regions, controlling for own and neighbouring knowledge production inputs. Taking this into account, leads to smaller coefficient estimates with regards to non-complex knowledge production and increases the apparent effect of complex knowledge production, relatively. However, to properly interpret the model, one needs to calculate impact estimates. 


```{r}
#| label: model-sdm-impacts

#impacts
sdm.impacts.fe <- SDPDmod::impactsSDPDm(model.sdm.fe)

summary(sdm.impacts.fe)

```

While the impact estimates are closer to the SLX model, the trend continues. Taking into account a spatial lag in the dependent variable reduces the apparent effectiveness of non-complex knowledge production in TFP growth while revealing a higher effect of complex knowledge production on productivity growth (compared to the SLX model). As the direct and indirect (spillover) effect of knowledge capital on TFP growth are opposed, the total effect of regional knowledge production on future TFP growth cannot be statistically distinguished from zero. It is thus not clear if policies that support the non-discriminative production of new knowledge will lead to a positive productivity development of city-regions. In contrast, while *metropolitan regions* might not benefit directly from specialising solely in complex technologies (ceteris paribus), policies that encourage regions in their development of complex technologies are likely to have a positive effect on overall total factor productivity development.  

```{r}
#| label: model-sdm-residuals

#extract residuals for year 2010
resids.temp.sdm <- dplyr::tibble(residuals = model.sdm.fe$resuduals) %>% 
  dplyr::slice(1921:2112) %>% pull()

moran.test(resids.temp.sdm, listw = k5.listw)

```

Checking again for residual spatial autocorrelation (for the year 2010, for example) reveals that the *spatial durbin model* seems to have eliminated all spatial dependence in the residuals which further strengthens the argumentation for this specific modelling approach.

# Conclusion

In this analysis I study whether city-regions or more specifically European *metropolitan regions* actually benefit from diversifying into more complex technology innovations or more generally complex knowledge production, as compared to encouraging non-discriminative innovation activities of local inventors. This is done by combining two streams within the economic geography literature. The works that introduce the novel concept of economic complexity into the regional sciences and argue for policy intervention on the basis of increased economic development for regions that specialise in complex technology fields (e.g., Balland and Rigby, 2017; Rigby et al., 2022), and the literature that see (regional) knowledge production as another factor of production in a *knowledge capital model* (KCM) (e.g., LeSage and Fischer, 2012; Scherngell et al., 2014). 

Mapping European metropolitan knowledge production based on patent applications in the last two decades, reveals that the spatial distribution of complex knowledge production actually differs from the overall knowledge production. Cities that do not produce the most patents overall top the ranking in terms of knowledge complexity (e.g, Rennes, Stockholm). This is an interesting insight as it suggests that empirical results based on patent production overall may not hold when the 'quality' or complexity of innovation activities is taken into account. A tangential but related result of this study is the fact that there seems to have been some kind of convergence in terms of total factor productivity among European *metropolitan regions* in the last two decades and also that the highest TFP growth was recorded (with some exceptions, e.g., Cork) in South and Eastern Europe. 

The typical assumption often made by related literature that cities are highly embedded into their neighbouring counterparts in economic development but also in their innovation activities, is broadly supported by empirical results of this study. Not only do the level and the growth of regional total factor productivity exhibit significant spatial dependence (autocorrelation), but also the complex and non-complex knowledge production - the predictor variables in the modelling exercises - suggest that cities are interdependent in their innovative activities. Given this, often employed modelling approaches in the literature such as pooled or even fixed effects linear models estimated by OLS, are likely biased. In order to properly take the geographical location of city-regions into account, I opted to estimate a spatial model that explicitly models the spatial dependence of *metropolitan regions'* knowledge production. 

Employing a fixed effects *spatial durbin model* yields a number of insights. European *metropolitan regions* benefit from spillover effects from other European city-regions, so regions should work on increasing their embeddedness with other regions and policies should promote this behaviour.While regions should not focus their efforts on any non-complex technology in the hopes of increasing future TFP, developing complex technology fields might lead to a European wide system of *metropolitan regions* that mutually benefit from each others new complex knowledge production.






